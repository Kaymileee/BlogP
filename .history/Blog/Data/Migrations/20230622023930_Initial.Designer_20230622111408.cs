// <auto-generated />
using System;
using Blog.Models.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Blog.Data.Migrations
{
  [DbContext(typeof(ApplicationDBContext))]
  [Migration("20230622023930_Initial")]
  partial class Initial
  {
    /// <inheritdoc />
    protected override void BuildTargetModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
      modelBuilder
          .HasAnnotation("ProductVersion", "7.0.7")
          .HasAnnotation("Relational:MaxIdentifierLength", 128);

      SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

      modelBuilder.Entity("Blog.Data.Entities.Attachment", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("int");

            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

            b.Property<DateTime>("CreatedDate")
                      .HasColumnType("datetime2");

            b.Property<string>("FileName")
                      .IsRequired()
                      .HasMaxLength(255)
                      .HasColumnType("nvarchar(255)");

            b.Property<string>("FilePath")
                      .IsRequired()
                      .HasMaxLength(255)
                      .HasColumnType("nvarchar(255)");

            b.Property<long>("FileSize")
                      .HasColumnType("bigint");

            b.Property<string>("FileType")
                      .IsRequired()
                      .HasMaxLength(4)
                      .HasColumnType("nvarchar(4)");

            b.Property<DateTime?>("LastModifiedDate")
                      .HasColumnType("datetime2");

            b.Property<int>("PostId")
                      .HasColumnType("int");

            b.HasKey("Id");

            b.HasIndex("PostId");

            b.ToTable("Attachment");
          });

      modelBuilder.Entity("Blog.Data.Entities.Category", b =>
          {
            b.Property<int>("CategoryId")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("int");

            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

            b.Property<string>("CategoryName")
                      .HasColumnType("nvarchar(max)");

            b.Property<string>("Description")
                      .HasColumnType("nvarchar(max)");

            b.Property<string>("Slug")
                      .HasColumnType("nvarchar(max)");

            b.HasKey("CategoryId");

            b.ToTable("Categories");
          });

      modelBuilder.Entity("Blog.Data.Entities.Comment", b =>
          {
            b.Property<int>("CommentId")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("int");

            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

            b.Property<string>("Content")
                      .HasColumnType("nvarchar(max)");

            b.Property<DateTime?>("CreatedDate")
                      .HasColumnType("datetime2");

            b.Property<DateTime?>("LastModifiedDate")
                      .HasColumnType("datetime2");

            b.Property<int?>("PostId")
                      .HasColumnType("int");

            b.Property<int>("ReplyId")
                      .HasColumnType("int");

            b.Property<string>("Title")
                      .HasColumnType("nvarchar(max)");

            b.HasKey("CommentId");

            b.HasIndex("PostId");

            b.ToTable("Comments");
          });

      modelBuilder.Entity("Blog.Data.Entities.Post", b =>
          {
            b.Property<int>("PostId")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("int");

            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

            b.Property<string>("Content")
                      .HasColumnType("nvarchar(max)");

            b.Property<DateTime?>("CreatedDate")
                      .HasColumnType("datetime2");

            b.Property<string>("ListTag")
                      .HasColumnType("nvarchar(max)");

            b.Property<string>("Slug")
                      .HasColumnType("nvarchar(max)");

            b.Property<int?>("Status")
                      .HasColumnType("int");

            b.Property<string>("Title")
                      .HasColumnType("nvarchar(max)");

            b.Property<Guid?>("UserId")
                      .HasColumnType("uniqueidentifier");

            b.HasKey("PostId");

            b.HasIndex("UserId");

            b.ToTable("Posts");
          });

      modelBuilder.Entity("Blog.Data.Entities.PostCategory", b =>
          {
            b.Property<int>("PostId")
                      .HasColumnType("int");

            b.Property<int>("CategoryId")
                      .HasColumnType("int");

            b.HasKey("PostId", "CategoryId");

            b.HasIndex("CategoryId");

            b.ToTable("PostCategories");
          });

      modelBuilder.Entity("Blog.Data.Entities.Tag", b =>
          {
            b.Property<int?>("TagId")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("int");

            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("TagId"));

            b.Property<string>("TagName")
                      .HasColumnType("nvarchar(max)");

            b.Property<string>("TagId")
                      .HasColumnType("nvarchar(max)");

            b.HasKey("TagId");

            b.ToTable("Tags");
          });

      modelBuilder.Entity("Blog.Data.Entities.User", b =>
          {
            b.Property<Guid?>("UserId")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("uniqueidentifier");

            b.Property<string>("Avatar")
                      .HasColumnType("nvarchar(max)");

            b.Property<string>("Code")
                      .HasColumnType("nvarchar(max)");

            b.Property<DateTime?>("CreatedDate")
                      .HasColumnType("datetime2");

            b.Property<string>("Email")
                      .HasColumnType("nvarchar(max)");

            b.Property<bool?>("IsEmailConfirmed")
                      .HasColumnType("bit");

            b.Property<DateTime?>("LastLogin")
                      .HasColumnType("datetime2");

            b.Property<string>("PasswordHash")
                      .HasColumnType("nvarchar(max)");

            b.Property<string>("UserName")
                      .HasColumnType("nvarchar(max)");

            b.HasKey("UserId");

            b.ToTable("Users");
          });

      modelBuilder.Entity("CategoryPost", b =>
          {
            b.Property<int>("CategoriesCategoryId")
                      .HasColumnType("int");

            b.Property<int>("PostsPostId")
                      .HasColumnType("int");

            b.HasKey("CategoriesCategoryId", "PostsPostId");

            b.HasIndex("PostsPostId");

            b.ToTable("CategoryPost");
          });

      modelBuilder.Entity("PostTag", b =>
          {
            b.Property<int>("PostsPostId")
                      .HasColumnType("int");

            b.Property<int>("TagsTagId")
                      .HasColumnType("int");

            b.HasKey("PostsPostId", "TagsTagId");

            b.HasIndex("TagsTagId");

            b.ToTable("PostTag");
          });

      modelBuilder.Entity("Blog.Data.Entities.Attachment", b =>
          {
            b.HasOne("Blog.Data.Entities.Post", "Post")
                      .WithMany("Attachments")
                      .HasForeignKey("PostId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();

            b.Navigation("Post");
          });

      modelBuilder.Entity("Blog.Data.Entities.Comment", b =>
          {
            b.HasOne("Blog.Data.Entities.Post", "Post")
                      .WithMany("Comments")
                      .HasForeignKey("PostId");

            b.Navigation("Post");
          });

      modelBuilder.Entity("Blog.Data.Entities.Post", b =>
          {
            b.HasOne("Blog.Data.Entities.User", "User")
                      .WithMany("Posts")
                      .HasForeignKey("UserId");

            b.Navigation("User");
          });

      modelBuilder.Entity("Blog.Data.Entities.PostCategory", b =>
          {
            b.HasOne("Blog.Data.Entities.Category", "Category")
                      .WithMany()
                      .HasForeignKey("CategoryId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();

            b.HasOne("Blog.Data.Entities.Post", "Post")
                      .WithMany()
                      .HasForeignKey("PostId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();

            b.Navigation("Category");

            b.Navigation("Post");
          });

      modelBuilder.Entity("CategoryPost", b =>
          {
            b.HasOne("Blog.Data.Entities.Category", null)
                      .WithMany()
                      .HasForeignKey("CategoriesCategoryId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();

            b.HasOne("Blog.Data.Entities.Post", null)
                      .WithMany()
                      .HasForeignKey("PostsPostId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();
          });

      modelBuilder.Entity("PostTag", b =>
          {
            b.HasOne("Blog.Data.Entities.Post", null)
                      .WithMany()
                      .HasForeignKey("PostsPostId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();

            b.HasOne("Blog.Data.Entities.Tag", null)
                      .WithMany()
                      .HasForeignKey("TagsTagId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();
          });

      modelBuilder.Entity("Blog.Data.Entities.Post", b =>
          {
            b.Navigation("Attachments");

            b.Navigation("Comments");
          });

      modelBuilder.Entity("Blog.Data.Entities.User", b =>
          {
            b.Navigation("Posts");
          });
#pragma warning restore 612, 618
    }
  }
}
